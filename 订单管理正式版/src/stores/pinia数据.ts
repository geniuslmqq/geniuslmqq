import { defineStore } from "pinia";
import { socket } from "./socket链接";

export const pinia数据中心 = defineStore("pinia数据中心", {
  state: () => {
    return {
      当前登录用户: "",
      密码: "",
      菜单: ["默认页", "第一页", "第二页", "第三页"],
      菜单列表: [
        { 序号: "0", 目标页: "/", 内容: "主页", 图标: "icon-home" },
        { 序号: "1", 目标页: "/mr", 内容: "默认页", 图标: "icon-home" },
        { 序号: "2", 目标页: "/1", 内容: "1图标页", 图标: "icon-home" },
        { 序号: "3", 目标页: "/2", 内容: "2旧订页", 图标: "icon-home1" },
        { 序号: "4", 目标页: "/3", 内容: "3测试页", 图标: "icon-home2" },
        { 序号: "5", 目标页: "/4", 内容: "4第四页", 图标: "icon-home3" },
        { 序号: "6", 目标页: "/5", 内容: "5旧订单", 图标: "icon-home4" },
      ],
      新订单: {
        _id: "",
        收件人: "",
        旺旺名: "",
        镜片下单日: "",
        镜片: "",
        右近视: "",
        右散光: "",
        右轴向: "",
        左近视: "",
        左散光: "",
        左轴向: "",
        右瞳距: "",
        左瞳距: "",
        备注: "",
      },

      要显示的首行: [],
      用户: <any>[],
      旧订单: [],
      要搜索的值: "",
      行的属性: "全局",
      旧订单搜索属性与值: [
        { 属性: '_id', 值: '' },
        { 属性: '旺旺名', 值: '' },
        { 属性: '收件人', 值: '' },
        { 属性: '镜片下单日', 值: '' },
        { 属性: '镜片', 值: '' },
        { 属性: '镜框', 值: '' },
        { 属性: '镜框下单日', 值: '' },
        { 属性: '镜片到货日', 值: '' },
      ],


      正反: -1,
      通过筛选的数量: 0,
      页数: 1,
      当前页: 1,
      旧订单每页显示的数量: 30,
      添加订单窗口开关: false,
    }
  },

  //计算属性
  getters: {
    //通过旧订单的首行来计算 首行的属性数组
    旧订单的所有属性: (state) => {
      let 属性
      let 订单的所有属性 = []
      for (属性 in state.旧订单[0]) {
        订单的所有属性.push(属性)
      }
      return 订单的所有属性;
    },

    //计算属性
    获取用户数据: (state) => {
      socket.emit('所有用户数据', (返回数据: any) => {
        console.log(返回数据)
        state.用户 = 返回数据
      });
    },

    //要显示的订单模块
    要显示的订单: (state) => {
      let 要显示的订单 = state.旧订单;
      //搜素模块
      if (state.要搜索的值) {
        要显示的订单 = state.旧订单.filter((行: any) => {       //过滤出要显示的订单           
          return Object.keys(行).some((key) => {   // key是行的每个属性名，some是检查行的属性是否有搜索的值
            if (state.行的属性 == '全局')                 // 未赋值的key是遍历所有属性
              return String(行[key]).indexOf(state.要搜索的值) > -1
            key = state.行的属性                                         // 赋值的key是搜索的属性
            return String(行[key]).indexOf(state.要搜索的值) > -1   // 如果行的key的值包含搜索值
          })
        })
      }
      //排序模块
      要显示的订单 = 要显示的订单.sort((前一个值: any, 后一个值: any) => {
        前一个值 = 前一个值[state.行的属性]
        后一个值 = 后一个值[state.行的属性]
        return (前一个值 >= 后一个值 ? 1 : -1) * state.正反  // 正反为-1时，升序，正反为1时，降序
      })
      state.通过筛选的数量 = 要显示的订单.length

      //分页模块
      state.页数 = Math.ceil(要显示的订单.length / state.旧订单每页显示的数量)
      //分页模块
      要显示的订单 = 要显示的订单.slice((state.当前页 - 1) * state.旧订单每页显示的数量, state.当前页 * state.旧订单每页显示的数量)


      return 要显示的订单
    },

    //要显示的订单的新模块
    要显示的新订单: (state) => {
      let 要显示的订单 = state.旧订单;
      let 要搜索的值 = state.旧订单搜索属性与值;
      let 序号: any

      //搜素模块 
      for (序号 in 要搜索的值) {
        if (要搜索的值[序号].值) {
          console.log("在" + 要搜索的值[序号].属性 + "中搜索" + 要搜索的值[序号].值)
          要显示的订单 = 要显示的订单.filter((行: any) => {
            return String(行[要搜索的值[序号].属性]).indexOf(要搜索的值[序号].值) >= 0
          })
        }
      }
      state.通过筛选的数量 = 要显示的订单.length


      //排序模块
      要显示的订单 = 要显示的订单.sort((前一个值: any, 后一个值: any) => {
        前一个值 = 前一个值[state.行的属性]
        后一个值 = 后一个值[state.行的属性]
        return (前一个值 >= 后一个值 ? 1 : -1) * state.正反  // 正反为-1时，升序，正反为1时，降序
      })

      //分页模块
      state.页数 = Math.ceil(要显示的订单.length / state.旧订单每页显示的数量)
      //分页模块
      要显示的订单 = 要显示的订单.slice((state.当前页 - 1) * state.旧订单每页显示的数量, state.当前页 * state.旧订单每页显示的数量)






      return 要显示的订单
    }
  },



  //函数 同步和异步函数
  actions: {
    //同步异步函数
    获取用户() {
      socket.emit('所有用户数据', (返回数据: any) => {
        this.用户 = 返回数据
      });
    },

    获取旧订单() {
      socket.emit('旧订单数据', (返回数据: any) => {
        this.旧订单 = 返回数据;
      })
    },
  },
});



